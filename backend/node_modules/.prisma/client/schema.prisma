generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model comment {
  id        Int    @id @default(autoincrement())
  content   String
  author    user   @relation(fields: [authorId], references: [email])
  authorId  String
  post      Post   @relation(fields: [postId], references: [id])
  postId    Int
  published String
}

model Post {
  id         Int       @id @default(autoincrement())
  content    String
  published  String
  Image      String?
  videoUrl   String?
  location   String?
  GIF        String?
  author     user      @relation(fields: [authorId], references: [email])
  authorId   String
  comments   comment[]
  likeNumber Int       @default(0)
  likes      likes[]
}

model likes {
  id     Int    @id @default(autoincrement())
  user   user   @relation(fields: [userId], references: [email])
  userId String
  post   Post   @relation(fields: [postId], references: [id])
  postId Int
}

model user {
  id              Int        @id @default(autoincrement())
  email           String     @unique
  name            String
  mobileNumber    String?
  profileImage    String?
  status          String?
  followers       String[]
  following       String[]
  requestSend     String[] // users this user requested to follow
  requestRecieved String[] // users who requested to follow this user
  posts           Post[]
  comments        comment[]
  messages        messages[] @relation("userArray")
  contacts        contacts[] @relation("UserContacts")
  friendContacts  contacts[] @relation("FriendContacts")
  likes           likes[]
}

model Session {
  id        String    @id @default(cuid())
  sid       String    @unique
  data      String
  expiresAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Socket {
  id       Int    @id @default(autoincrement())
  userId   String @unique
  socketId String
}

model messages {
  id             Int              @id @default(autoincrement())
  userArray      user[]           @relation("userArray")
  createdAt      DateTime         @default(now())
  messageContent messageContent[]
}

model messageContent {
  id        Int      @id @default(autoincrement())
  content   String
  authorId  String
  createdAt DateTime @default(now())
  messages  messages @relation(fields: [messageId], references: [id])
  messageId Int
}

model contacts {
  id         Int     @id @default(autoincrement())
  user       user    @relation("UserContacts", fields: [userId], references: [email])
  userId     String
  friend     user    @relation("FriendContacts", fields: [friendId], references: [email])
  friendId   String
  friendname String?
  username   String?
}
